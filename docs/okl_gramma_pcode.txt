switch (mode) {
case "OpenCL":
    global..Insert(0, "#pragma OPENCL EXTENSION cl_khr_fp64 : enable");
    break;

case "HIP":
    global.AddBefore("#include <hip/hip_runtime.h>\n");
    break;

case "Metal":
    global.Insert(0, "#include <metal_compute>");
    global.Insert(1, "#include <metal_stdlib>");
    global.Insert(2, "");
    global.Insert(3, "using namespace metal;\n");
    break;

case "dpcpp":
    global.Insert(0, "#include <CL/sycl.hpp>");
    global.Insert(1, " using namespace sycl;");
    global.Insert(2, "");
    break;
}

bool has_kernel = false;

visitChildren([&has_kernel](const Decl& keyword) {

visit<"@kernel"> {
    auto& FuncDecl = dynamic_cast<FuncDecl>(keyword.ctx());

    if (!FuncDecl)
        throw("Cannot apply attribute to variables");

    if (keyword.Params.size() > 0)
        throw("[@kernel] does not take arguments");

    if (FuncDecl.ReturnType != "void")
        throw("[@kernel] functions must have a [void] return type");

    token_stream.ignore(keyword);
    FuncDecl.AddAttr(OKLKernel{});

    has_kernel = true;

    bool has_outer = false;
    bool has_inner = false
    visitChildren<ForDecl>([&has_outer](const ForDecl& loop){
        if (loop.HasAttr<OKLOuterLoop>)
            has_outer = true;
        if (loop.HasAttr<OKLInnerLoop>)
            has_inner = true;
    });

    if (!has_outer)
        throw("[@kernel] requires at least one [@outer] for-loop");
    if (!has_inner)
        throw("[@kernel] requires at least one [@inner] for-loop");

    switch (mode)
    case "Serial":
        if (!FuncDecl.Body)
            break;

        FuncDecl.Insert(0, "extern \"C\"");
        break;
    case "OpenMP":
        if (!FuncDecl.Body)
            break;

        FuncDecl.Insert(0, "extern \"C\"");
        break;
    case "OpenCL":
        FuncDecl.Insert(0, "__kernel");
        for (auto i = size_t{1}; i < FuncDecl.Params.size(); ++i) {
            auto& param = FuncDecl.Params[i];
            param.Insert(0, "__global");
        }
        break;
    case "CUDA":
        if (!FuncDecl.Body)
            break;

        FuncDecl.Insert(0, "extern \"C\"");
        FuncDecl.Insert(1, "__global__");
        break;
    case "HIP":
        if (!FuncDecl.Body)
            break;

        FuncDecl.Insert(0, "extern \"C\"");
        FuncDecl.Insert(1, "__global__");
        break;
    case "Metal":
        FuncDecl.Insert(0, "kernel");
        auto i = size_t{0};
        for(auto &param: FuncDecl.Params) {
            param.type =
                (param.is_const ? "constant" : "device")
                + param.type
                + (!param.is_pointer ? "&" : "*")
                + param.name
                + "[[buffer(" + i + ")]]";
        }
        FuncDecl.Params.Append("uint3 _occa_group_position [[threadgroup_position_in_grid]]");
        FuncDecl.Params.Append("uint3 _occa_thread_position [[thread_position_in_threadgroup]]");
        break;
    case "dpcpp":
        FuncDecl.Insert(0, "extern \"C\"");
        break;
    }
}
break;

visit<"@outer"> {
    if (!ForDecl && !ForDeclParam)
        throw();

    auto l_ForDecl = ForDecl ? ForDecl : GetParent(ForDecl);
}

visit<"@tile"> {
    if (!ForDecl && !ForDeclParam)
        throw();

    auto l_ForDecl = ForDecl ? ForDecl : GetParent(ForDecl);
    if (keyword.Params.size() < 1)
        throw("[@tile] expects at least one argument");

    if (!keyword.Params[0].is_integer) {
        keyword.Ignore();
        break;
    }

    int tile_size = static_cast<int>(keyword.Params[0]);
    bool is_check = true;

    if (keyword.Params.size() > 1) {
        //if (keyword.Params.size() < 3)
        //   throw("[@tile] takes 1-3 arguments, the last 2 being attributes for the block and in-block loops respectively");

        switch (keyword.Params[1]) {
        case "@outer":
            l_ForDecl.AddAttr(OKLOuterLoop{});
            break;
        case "@inner":
            l_ForDecl.AddAttr(OKLInnerLoop{});
            break;
        case ""
            break;
        default:
            throw("[@tile] can only take attributes for the 2nd and 3rd arguments");
        }

        if (keyword.Params.size() > 2) {
            switch (keyword.Params[2]) {
            case "@outer":
                if (l_ForDecl.HasAttr<OKLInnerLoop>())
                    throw("Cannot have [@inner] loop outside of an [@outer] loop");
                break;
            case "@inner":
                if (!l_ForDecl.HasAttr<OKLInnerLoop>())
                    l_ForDecl.AddAttr(OKLInnerLoop{});
                break;
            case "":
                break;
            default:
                throw("[@tile] can only take attributes for the 2nd and 3rd arguments");
            }
        }

        if (keyword.Params.size() == 4) {
            // throw("[@tile] does not take this kwarg");

            if (!keyword.Params[3].is_bool)
                throw("[@tile] 'check' argument must be true or false");

            is_check = static_cast<bool>(keyword.Params[3]);
        }
    }

    l_ForDecl.AddAttr(OKLTile{tile_size, is_check});
    break;
}

}

};

if (!has)


switch (mode)
case "Serial":
    break;

case "OpenMP":
    break;

case "OpenCL":
    break;

case "CUDA":
    break;

case "HIP":
    break;

case "Metal":
    break;

case "dpcpp":
    break;
}
